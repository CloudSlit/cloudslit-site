[{"id":0,"href":"/flowshield_docs/cloudslit/cloudslit-client/architecture/overview/","title":"OverView","section":"Architecture","content":" OverView # "},{"id":1,"href":"/flowshield_docs/cloudslit/cloudslit-contracts/architecture/overview/","title":"OverView","section":"Architecture","content":" OverView # "},{"id":2,"href":"/flowshield_docs/cloudslit/cloudslit-fullnode/architecture/overview/","title":"OverView","section":"Architecture","content":" OverView # "},{"id":3,"href":"/flowshield_docs/cloudslit/cloudslit-provider/architecture/overview/","title":"OverView","section":"Architecture","content":" OverView # "},{"id":4,"href":"/flowshield_docs/cloudslit/cloudslit-verifier/architecture/overview/","title":"OverView","section":"Architecture","content":" OverView # "},{"id":5,"href":"/flowshield_docs/cloudslit/deca/architecture/overview/","title":"OverView","section":"Architecture","content":" OverView # Public Key Infrastructure (PKI) is one of the most widely accepted cryptographic protocols for solving authentication for enabling secure communications on the web. PKI consists of digital certificates managed by a certification authority (CA) to verify the identity of the user, thus providing a secure communication channel. However, the traditional PKI method has problems such as difficulty in mutual trust between multiple certification center nodes, single point of failure, and low efficiency. The centralized mode of operation of CAs has led to many targeted attacks, such as man-in-the-middle attacks. In this paper, the goal of DECA is to completely decentralize the CA pool, while building a high-performance DPKI certification system to achieve a DPKI decentralized solution.\nDECA uses the two basic modules of decentralized identity identification (DID) and verifiable statement (identity certificate) to define the format of identity identifiers, describe documents and processes such as generation, presentation, verification and destruction of identity certificates, covering identity and The complete life cycle of credential management, using decentralized trust management technology, provides on-chain storage and off-chain storage. Best practice is to store a small amount of data (e.g. id, state, etc.) on-chain, and a large amount of data (e.g. public key, authentication method, etc.) off-chain (e.g. IPFS), and combine them through the on-chain data transfer. Store hash, and realize decentralized authentication calculation by constructing offline data crdt consistent storage, and constructing component roles such as issuer and verifier.\nThis decentralized authentication protocol improves the efficiency of online cross-domain authentication transactions by verifying the hash value of the certificate instead of the signature. By placing the certificate generation process and the storage process of its hash in the registration operation, the verification process of Verifier and CA is reduced, and the efficiency is further improved.\n"},{"id":6,"href":"/flowshield_docs/cloudslit/cloudslit-client/architecture/network/","title":"NetWork","section":"Architecture","content":" NetWork Details # "},{"id":7,"href":"/flowshield_docs/cloudslit/cloudslit-fullnode/architecture/network/","title":"NetWork","section":"Architecture","content":" NetWork Details # "},{"id":8,"href":"/flowshield_docs/cloudslit/cloudslit-provider/architecture/network/","title":"NetWork","section":"Architecture","content":" NetWork Details # "},{"id":9,"href":"/flowshield_docs/cloudslit/cloudslit-verifier/architecture/network/","title":"NetWork","section":"Architecture","content":" NetWork Details # "},{"id":10,"href":"/flowshield_docs/cloudslit/deca/architecture/network/","title":"NetWork","section":"Architecture","content":" NetWork Details # DECA utilizes decentralized identity identification (DID) and verifiable claim (identity credential), supports key PKI functions, utilizes the immutable feature of offline storage (IPFS), effectively prevents third-party attacks, utilizes IPFS-CRDT synchronization strategy, enhances Concealed sharing, fast synchronization, and the use of blockchain to synchronize a small amount of basic information, greatly reducing the cost of consensus.\n1.Apply for user identity DID: combine user certificate, verification method and other information according to the user\u0026rsquo;s basic identification.\n2.Store user identity information: Organize user identity-related information into Docs for offline storage to obtain the storage address docAddr, and use CRDT for consistent synchronization.\n3.Registered user identity DID: Store user identity-related information to obtain the storage address docAddr and content hash docHash, and send a registration request like a blockchain.\n4.Resolve user identity DID: The information of user DID is synchronized on the blockchain and the offline storage network, so user DID resolution can be initiated to any DECA. The client initiates a parsing request to any DECA, obtains the relevant information of the identity (including the storage address and content hash), obtains the actual user Doc through the storage address, and performs hash verification. If it passes, it proves that the Doc is credible .\n"},{"id":11,"href":"/flowshield_docs/cloudslit/cloudslit-client/architecture/storage/","title":"Storage","section":"Architecture","content":" Storage Engine Details # "},{"id":12,"href":"/flowshield_docs/cloudslit/cloudslit-contracts/architecture/storage/","title":"Storage","section":"Architecture","content":" Storage Engine Details # "},{"id":13,"href":"/flowshield_docs/cloudslit/cloudslit-fullnode/architecture/storage/","title":"Storage","section":"Architecture","content":" Storage Engine Details # "},{"id":14,"href":"/flowshield_docs/cloudslit/cloudslit-provider/architecture/storage/","title":"Storage","section":"Architecture","content":" Storage Engine Details # "},{"id":15,"href":"/flowshield_docs/cloudslit/cloudslit-verifier/architecture/storage/","title":"Storage","section":"Architecture","content":" Storage Engine Details # "},{"id":16,"href":"/flowshield_docs/cloudslit/deca/architecture/storage/","title":"Storage","section":"Architecture","content":" Storage Engine Details # Centralized storage data is centralized, and the amount of data involved is larger, making the data more vulnerable to attacks and leaks. The security, privacy and sustainability of centrally stored data all present certain risks.\nData security includes two meanings: the first layer is \u0026ldquo;guarantee data privacy without leakage\u0026rdquo;, and the second layer is \u0026ldquo;guarantee the integrity of data without loss\u0026rdquo;.\nIn the current centralized storage mode, users upload all sensitive data, which not only makes users lose control over their own data, but also transfers the risk of data leakage to the cloud storage operator. If the private information is lost, damaged, leaked, or stolen, it may cause heavy losses to individuals, enterprises and even the entire society.\nCentralized cloud storage operators may stop services for various reasons, but users have no right to control the behavior of service providers and control their own interests. This causes users to tend to store data in larger and more credible service providers, which makes the data centralization of the leading companies higher and higher, which also causes large-scale loss of data once the data is lost. Happening.\nAnd DECA implements a decentralized storage method based on IPFS and web3.storage, builds a complete and unified data object adaptation layer, and makes better use of data middleware to encapsulate and encrypt data, and the encryption key is set by The user is controlled by the main body, and finally the data is stored in a decentralized storage system to ensure that data privacy is not leaked. Using the characteristics of ipfs, the integrity of the data can be guaranteed, and then the crdt technology is used to achieve eventual consistency. The data synchronized by crdt is not It is certificate metadata, only synchronizes the decentralized storage identifier, and has the characteristics of high performance and high stability.\n"},{"id":17,"href":"/flowshield_docs/cloudslit/vocabulary/","title":"Vocabulary","section":"Overview","content":" Vocabulary # The main terms used in FlowShield products are listed below.\n"},{"id":18,"href":"/flowshield_docs/cloudslit/cloudslit-client/architecture/protocol/","title":"Protocol","section":"Architecture","content":" Protocol Details # "},{"id":19,"href":"/flowshield_docs/cloudslit/cloudslit-contracts/architecture/protocol/","title":"Protocol","section":"Architecture","content":" Protocol Details # "},{"id":20,"href":"/flowshield_docs/cloudslit/cloudslit-fullnode/architecture/protocol/","title":"Protocol","section":"Architecture","content":" Protocol Details # "},{"id":21,"href":"/flowshield_docs/cloudslit/cloudslit-provider/architecture/protocol/","title":"Protocol","section":"Architecture","content":" Protocol Details # "},{"id":22,"href":"/flowshield_docs/cloudslit/cloudslit-verifier/architecture/protocol/","title":"Protocol","section":"Architecture","content":" Protocol Details # "},{"id":23,"href":"/flowshield_docs/cloudslit/deca/architecture/protocol/","title":"Protocol","section":"Architecture","content":" Protocol Details # Current certificate systems protect online communications through the secure delivery of public keys, which correspond to identities, which use the corresponding secret private key to decrypt messages sent to them and prove that they sent messages (by signing them with the private key). Additionally users cannot be sure that their communications have not been compromised by fraudulent certificates that allow MITM (man-in-the-middle) attacks, which are difficult to detect.\nDECA\u0026rsquo;s goal is to ensure that no third party can compromise the integrity and security of the entire system, and is fully capable of providing similar or higher security properties through the use of decentralized data storage consensus technology.\nDECA builds on the existence of validators, but their role is limited to ensuring communication security and integrity, by leveraging identifiers in decentralized storage, through a series of algorithms that allow these values to be read globally in a secure way, which This way is less vulnerable to MITM attacks that may occur in PKI. This is achieved by linking the lookup value of a decentralized identifier to the latest and most correct public key for that identifier.\nDecentralized OCSP # As an important information of application identity, digital certificate is very important to ensure network communication trust. Therefore, certificate revocation is critical to mitigate vulnerabilities and potential key disclosure. The certificate holder can revoke an untrusted certificate.\nDECA in combination with FEVM, has implemented a decentralized OCSP authentication system. It uses smart contracts to store and verify the status of certificates. The verifier uses certificate identifiers to verify the online status information of certificates through smart contracts, and returns the certificate status information to the verifier. The whole process has no centralized OCSP server. The verifier interacts with the FEVM to achieve decentralized OCSP online certificate authentication. "},{"id":24,"href":"/flowshield_docs/cloudslit/deca/architecture/","title":"Architecture","section":"DeCA","content":" Abstract # Public Key Infrastructure (PKI) is one of the most widely accepted cryptographic protocols for solving authentication for enabling secure communications on the web. PKI consists of digital certificates managed by a certification authority (CA) to verify the identity of the user, thus providing a secure communication channel. However, the traditional PKI method has problems such as difficulty in mutual trust between multiple certification center nodes, single point of failure, and low efficiency. The centralized mode of operation of CAs has led to many targeted attacks, such as man-in-the-middle attacks. In this paper, the goal of DECA is to completely decentralize the CA pool, while building a high-performance DPKI certification system to achieve a DPKI decentralized solution.\nDECA uses the two basic modules of decentralized identity identification (DID) and verifiable statement (identity certificate) to define the format of identity identifiers, describe documents and processes such as generation, presentation, verification and destruction of identity certificates, covering identity and The complete life cycle of credential management, using decentralized trust management technology, provides on-chain storage and off-chain storage. Best practice is to store a small amount of data (e.g. id, state, etc.) on-chain, and a large amount of data (e.g. public key, authentication method, etc.) off-chain (e.g. IPFS), and combine them through the on-chain data transfer. Store hash, and realize decentralized authentication calculation by constructing offline data crdt consistent storage, and constructing component roles such as issuer and verifier.\nThis decentralized authentication protocol improves the efficiency of online cross-domain authentication transactions by verifying the hash value of the certificate instead of the signature. By placing the certificate generation process and the storage process of its hash in the registration operation, the verification process of Verifier and CA is reduced, and the efficiency is further improved.\nFramework # DECA utilizes decentralized identity identification (DID) and verifiable claim (identity credential), supports key PKI functions, utilizes the immutable feature of offline storage (IPFS), effectively prevents third-party attacks, utilizes IPFS-CRDT synchronization strategy, enhances Concealed sharing, fast synchronization, and the use of blockchain to synchronize a small amount of basic information, greatly reducing the cost of consensus.\n1.Apply for user identity DID: combine user certificate, verification method and other information according to the user\u0026rsquo;s basic identification.\n2.Store user identity information: Organize user identity-related information into Docs for offline storage to obtain the storage address docAddr, and use CRDT for consistent synchronization.\n3.Registered user identity DID: Store user identity-related information to obtain the storage address docAddr and content hash docHash, and send a registration request like a blockchain.\n4.Resolve user identity DID: The information of user DID is synchronized on the blockchain and the offline storage network, so user DID resolution can be initiated to any DECA. The client initiates a parsing request to any DECA, obtains the relevant information of the identity (including the storage address and content hash), obtains the actual user Doc through the storage address, and performs hash verification. If it passes, it proves that the Doc is credible .\nDecentralized storage # Centralized storage data is centralized, and the amount of data involved is larger, making the data more vulnerable to attacks and leaks. The security, privacy and sustainability of centrally stored data all present certain risks.\nData security includes two meanings: the first layer is \u0026ldquo;guarantee data privacy without leakage\u0026rdquo;, and the second layer is \u0026ldquo;guarantee the integrity of data without loss\u0026rdquo;.\nIn the current centralized storage mode, users upload all sensitive data, which not only makes users lose control over their own data, but also transfers the risk of data leakage to the cloud storage operator. If the private information is lost, damaged, leaked, or stolen, it may cause heavy losses to individuals, enterprises and even the entire society.\nCentralized cloud storage operators may stop services for various reasons, but users have no right to control the behavior of service providers and control their own interests. This causes users to tend to store data in larger and more credible service providers, which makes the data centralization of the leading companies higher and higher, which also causes large-scale loss of data once the data is lost. Happening.\nAnd DECA implements a decentralized storage method based on IPFS and web3.storage, builds a complete and unified data object adaptation layer, and makes better use of data middleware to encapsulate and encrypt data, and the encryption key is set by The user is controlled by the main body, and finally the data is stored in a decentralized storage system to ensure that data privacy is not leaked. Using the characteristics of ipfs, the integrity of the data can be guaranteed, and then the crdt technology is used to achieve eventual consistency. The data synchronized by crdt is not It is certificate metadata, only synchronizes the decentralized storage identifier, and has the characteristics of high performance and high stability.\nDecentralized computing # Current certificate systems protect online communications through the secure delivery of public keys, which correspond to identities, which use the corresponding secret private key to decrypt messages sent to them and prove that they sent messages (by signing them with the private key). Additionally users cannot be sure that their communications have not been compromised by fraudulent certificates that allow MITM (man-in-the-middle) attacks, which are difficult to detect.\nDECA\u0026rsquo;s goal is to ensure that no third party can compromise the integrity and security of the entire system, and is fully capable of providing similar or higher security properties through the use of decentralized data storage consensus technology.\nDECA builds on the existence of validators, but their role is limited to ensuring communication security and integrity, by leveraging identifiers in decentralized storage, through a series of algorithms that allow these values to be read globally in a secure way, which This way is less vulnerable to MITM attacks that may occur in PKI. This is achieved by linking the lookup value of a decentralized identifier to the latest and most correct public key for that identifier.\nDecentralized OCSP # As an important information of application identity, digital certificate is very important to ensure network communication trust. Therefore, certificate revocation is critical to mitigate vulnerabilities and potential key disclosure. The certificate holder can revoke an untrusted certificate.\nDECA in combination with FEVM, has implemented a decentralized OCSP authentication system. It uses smart contracts to store and verify the status of certificates. The verifier uses certificate identifiers to verify the online status information of certificates through smart contracts, and returns the certificate status information to the verifier. The whole process has no centralized OCSP server. The verifier interacts with the FEVM to achieve decentralized OCSP online certificate authentication. "},{"id":25,"href":"/flowshield_docs/cloudslit/cloudslit-fullnode/quick_start/","title":"Quick Start","section":"FlowShield-Fullnode","content":" Quick Start # "},{"id":26,"href":"/flowshield_docs/cloudslit/","title":"Overview","section":"FlowShield","content":" FlowShield - Private retrieval of data # Inspiration # At present, the options available for interactive (low-latency) communication with privacy guarantee are very limited, and the solutions developed so far all focus on the traditional web model of single source data publisher, and it has defects in delay and threat models.\nFlowShield uses blockchain, web3 and secure network technology of private data retrieval to enhance and improve network security/privacy protection of users\u0026rsquo; privatization.\nIn order to protect the public\u0026rsquo;s network security under web2, a very popular zero-trust security architecture has emerged. Our team has been working on open source products with zero trust security, but we found that although many zero trust network security companies provide zero trust security platforms, they monopolize users\u0026rsquo; network access nodes and centrally store users\u0026rsquo; core security profiles. Therefore, we are considering whether we can use web3 technology to realize a secure network for private data retrieval. We designed FlowShield project to provide users with a decentralized secure network platform for private data retrieval, and help users master their own secure data.\nIts value # FlowShield aims to build a decentralized private data retrieval security network system of web3 in the world, and help users recapture the privacy security information eroded by giants under web2, so that the current global hot zero-trust security network technology combined with web3 can better help users master their own security privacy data and give users a good experience of private data retrieval security network products.\nHow do we build it? # The design part of FlowShield project includes distributed full-nodes, network miner provider, intelligent contract, network quality checker and network client program. The details are as follows:\nPart Ⅰ: FlowShield-Fullnode (Ful nodes of private data retrieval network based on DAO Tools) # Anyone can run Fullnode, which hosts the metadata of decentralized network and provides metadata networking and transaction matching platform. It integrates metadata from all providers, and providers use libp2p-based pubsub every few seconds to keep heartbeat to Fullnode to prove that they are online.\nUsers can find resources and nodes to build their own secure anonymous network tunnel. They only need to pay some tokens, and the provider nodes can get these tokens as rewards.\nFor all users\u0026rsquo; and Dao\u0026rsquo;s data, we use Filecoin\u0026rsquo;s web3.storage to store user data in a decentralized way.\nPart Ⅱ: FlowShield-Provider (Network Miner, a Secure Network Tunnel Provider for Decentralized Data Private Retrieval) # Our nodes are automatically networked through kademlia DHT and IPFS networks of libp2p through peer discovery and routing, and data synchronization among multiple nodes is realized through PubSub function of libp2p.\nFor all users and Dao data, we use web3.storage of Filecoin to store user data in a decentralized way.\nPart Ⅲ: FlowShield-Contracts (support:EVM Chains) # We provide a complete smart contract for the decentralized trusted bandwidth market. Our smart contract is deployed on the EVM network, and we provide many methods in the smart contract to ensure a safe trading process and a safe trading environment.\nPart Ⅳ: FlowShield-verifier (Decentralized network quality checker) # We provide the verifier component for the decentralized trusted bandwidth market. Anyone can run the network verifier, monitor the network quality of ongoing orders, and detect and punish illegal and bad network providers.\nPart Ⅴ: DeCA (Decentralized PKI CA center) # Decentralize PKI CA center to provide communication authentication infrastructure for Dao point-to-point communication.\nPart Ⅵ: FlowShield-Client (client for private data retrieval.) # A client user connects to a provider to establish a network security tunnel for private data retrieval.\nThanks supports # Protocol Labs Filecoin Nervos "},{"id":27,"href":"/flowshield_docs/cloudslit/cloudslit-fullnode/tutorials/","title":"Tutorials","section":"FlowShield-Fullnode","content":" Tutorials # "},{"id":28,"href":"/flowshield_docs/cloudslit/cloudslit-fullnode/deploy/","title":"Deploy","section":"FlowShield-Fullnode","content":" Deploy # "},{"id":29,"href":"/flowshield_docs/cloudslit/cloudslit-fullnode/develop/","title":"Develop","section":"FlowShield-Fullnode","content":" Develop # "},{"id":30,"href":"/flowshield_docs/cloudslit/faqs/","title":"FAQs","section":"Overview","content":" FAQs # "},{"id":31,"href":"/flowshield_docs/cloudslit/news/","title":"News","section":"Overview","content":" Record the bits and pieces of FlowShield. # "}]